package com.android.gui.comp;import java.awt.Color;import java.awt.Component;import java.awt.Dimension;import java.awt.Graphics;import java.awt.Graphics2D;import java.awt.Rectangle;import java.awt.event.MouseAdapter;import java.awt.event.MouseEvent;import java.awt.event.MouseListener;import java.awt.geom.AffineTransform;import java.awt.image.BufferedImage;import java.io.IOException;import java.util.ArrayList;import java.util.HashMap;import javax.swing.Icon;import javax.swing.JComponent;import javax.swing.JMenuItem;import javax.swing.JPopupMenu;import javax.swing.JScrollPane;import javax.swing.JTabbedPane;import javax.swing.JToolTip;import javax.swing.SwingUtilities;import net.coobird.thumbnailator.Thumbnails;import com.android.gui.drawpane.DrawPane;import com.android.gui.frame.CenterPanelManager;/** *  * @ClassName: YiTabbedPane * @Description: 扩展JTabbedPane,增加关闭、右键菜单、缩略图提示功能 *  */public class JXTabbedPane extends JTabbedPane implements MouseListener {	private static final long serialVersionUID = 2985098138273905480L;	/**	 * 缩略图缩放大小	 */	private double scaleRatio = 0.3d;	private HashMap<String, Component> maps = new HashMap<String, Component>();	public JXTabbedPane() {		super();		addMouseListener(this);	}	public JXTabbedPane(int tabPlacement, int tabLayoutPolicy) {		super(tabPlacement, tabLayoutPolicy);		addMouseListener(this);	}	public JXTabbedPane(int tabPlacement) {		super(tabPlacement);		addMouseListener(this);	}	@Override	public void addTab(String title, Icon icon, Component component, String tip) {		super.addTab(title, icon, component, tip);	}	@Override	public void addTab(String title, Icon icon, Component component) {		super.addTab(title, new CloseTabIcon(), component);	}	@Override	public void addTab(String title, Component component) {		addTab(title, new CloseTabIcon(), component);	}	public void insertTab(String title, Icon icon, Component component,			String tip, int index) {		tip = "tab" + component.hashCode();		maps.put(tip, component);		super.insertTab(title, icon, component, tip, index);	}	public void removeTabAt(int index) {		if (index == -1) {			return;		}		Component component = getComponentAt(index);		maps.remove("tab" + component.hashCode());		CenterPanelManager.removeEditor(index);		super.removeTabAt(index);	}	public JToolTip createToolTip() {		ThumbnailToolTip tooltip = new ThumbnailToolTip();		tooltip.setComponent(this);		return tooltip;	}	@Override	public void mouseClicked(MouseEvent e) {		if (SwingUtilities.isRightMouseButton(e)) {			showPopupMenu(e);		} else {			if (e.getClickCount() < 2) {				return;			}			int tabNumber = getUI().tabForCoordinate(this, e.getX(), e.getY());			if (tabNumber < 0) {				return;			}			Rectangle rect = ((CloseTabIcon) getIconAt(tabNumber)).getBounds();			if (rect.contains(e.getX(), e.getY())) {				this.removeTabAt(tabNumber);			}		}	}	@Override	public void mousePressed(MouseEvent e) {	}	@Override	public void mouseReleased(MouseEvent e) {		// 关闭图标只响应左键		if (SwingUtilities.isLeftMouseButton(e)) {			// int tabNumber = getUI().tabForCoordinate(this, e.getX(),			// e.getY());			// if (tabNumber < 0) {			// return;			// }			// Rectangle rect = ((CloseTabIcon)			// getIconAt(tabNumber)).getBounds();			// if (rect.contains(e.getX() - rect.getWidth(), e.getY())) {			// this.removeTabAt(tabNumber);			// }		} else if (SwingUtilities.isRightMouseButton(e)) {			showPopupMenu(e);		}	}	private void showPopupMenu(final MouseEvent event) {		if (getTabCount() == 0) {			return;		}		// 如果当前事件与右键菜单有关（单击右键），则弹出菜单		if (event.isPopupTrigger()) {			final int index = ((JXTabbedPane) event.getComponent()).getUI()					.tabForCoordinate(this, event.getX(), event.getY());			// final int count =			// ((JXTabbedPane)event.getComponent()).getTabCount();			JPopupMenu pop = new JPopupMenu();			JMenuItem closeCurrent = new JMenuItem("关闭当前");			closeCurrent.addMouseListener(new MouseAdapter() {				public void mouseReleased(MouseEvent e) {					((JXTabbedPane) event.getComponent()).removeTabAt(index);				}			});			pop.add(closeCurrent);			// JMenuItem closeLeft = new JMenuItem("关闭左侧标签");			// closeLeft.addMouseListener(new MouseAdapter() {			// public void mouseReleased(MouseEvent e) {			// for(int j=(index-1);j>=0;j--) {			// ((JXTabbedPane)event.getComponent()).removeTabAt(j);			// }			// }			// });			// pop.add(closeLeft);			//			// JMenuItem closeRight = new JMenuItem("关闭右侧标签");			// closeRight.addMouseListener(new MouseAdapter() {			// public void mouseReleased(MouseEvent e) {			// for(int j=(count-1);j>index;j--) {			// ((JXTabbedPane)event.getComponent()).removeTabAt(j);			// }			// }			// });			// pop.add(closeRight);			pop.show(event.getComponent(), event.getX(), event.getY());		}	}	@Override	public void mouseEntered(MouseEvent e) {	}	@Override	public void mouseExited(MouseEvent e) {	}	/**	 * 	 * @ClassName: ImageToolTip	 * @Description: 缩略图	 * @author QQ [email]tkts@qq.com[/email]	 * 	 */	class ThumbnailToolTip extends JToolTip {		private static final long serialVersionUID = -7317621488447910306L;		public Dimension getPreferredSize() {			String tip = getTipText();			Component component = maps.get(tip);			if (component != null) {				return new Dimension(						(int) (getScaleRatio() * component.getWidth()),						(int) (getScaleRatio() * component.getHeight()));			} else {				return super.getPreferredSize();			}		}		public void paintComponent(Graphics g) {			String tip = getTipText();			Component component = maps.get(tip);			if (component instanceof JScrollPane) {				JScrollPane jcomponent = (JScrollPane) component;				DrawPane drawpane = (DrawPane) jcomponent.getViewport()						.getView();				BufferedImage img = new BufferedImage(drawpane.getWidth(),						drawpane.getHeight(), BufferedImage.TYPE_3BYTE_BGR);				Graphics2D g2d = img.createGraphics();				drawpane.reDraw();				drawpane.paint(g2d);				try {					//构造所缩略图					img = Thumbnails							.of(img)							.size((int) getSize().getWidth(),									(int) getSize().getHeight())							.asBufferedImage();				} catch (IOException e) {					e.printStackTrace();				}				((Graphics2D) g).drawImage(img, 0, 0, this);			}		}	}	public double getScaleRatio() {		return scaleRatio;	}	public void setScaleRatio(double scaleRatio) {		this.scaleRatio = scaleRatio;	}}class CloseTabIcon implements Icon {	private int x_pos;	private int y_pos;	private int width;	private int height;	public CloseTabIcon() {		width = 16;		height = 16;	}	public void paintIcon(Component c, Graphics g, int x, int y) {		this.x_pos = x;		this.y_pos = y;		int y_p = y + 2;		Color col = g.getColor();		g.setColor(Color.black);		g.drawLine(x + 1, y_p, x + 12, y_p);		g.drawLine(x + 1, y_p + 13, x + 12, y_p + 13);		g.drawLine(x, y_p + 1, x, y_p + 12);		g.drawLine(x + 13, y_p + 1, x + 13, y_p + 12);		g.drawLine(x + 3, y_p + 3, x + 10, y_p + 10);		g.drawLine(x + 3, y_p + 4, x + 9, y_p + 10);		g.drawLine(x + 4, y_p + 3, x + 10, y_p + 9);		g.drawLine(x + 10, y_p + 3, x + 3, y_p + 10);		g.drawLine(x + 10, y_p + 4, x + 4, y_p + 10);		g.drawLine(x + 9, y_p + 3, x + 3, y_p + 9);		g.setColor(col);		// if (fileIcon != null) {		// fileIcon.paintIcon(c, g, x + width, y_p);		// }	}	public int getIconWidth() {		// return width + (fileIcon != null ? fileIcon.getIconWidth() : 0);		return 16;	}	public int getIconHeight() {		return height;	}	public Rectangle getBounds() {		return new Rectangle(x_pos, y_pos, width, height);	}}